name: Deploy CDK

on:
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  CDK_CONTEXT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/resume-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js (for CDK CLI)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk@2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install CDK Python dependencies
        run: pip install -r cdk/requirements.txt

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Build Lambda docx layer (python-docx + lxml)
        run: |
          chmod +x layers/docx_layer/build.sh
          bash layers/docx_layer/build.sh

      - name: CDK Bootstrap (safe to rerun)
        run: |
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} \
            --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \
            --require-approval never || true
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Deploy CDK stacks
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: |
          cdk deploy --app "python3.11 -m cdk.app" \
            ResumeAuthStack ResumeBackendStack ResumeFrontendStack \
            --require-approval never

      # Optional CloudFront invalidation
      # - name: Invalidate CloudFront cache
      #   if: ${{ secrets.CF_DIST_ID != '' }}
      #   run: aws cloudfront create-invalidation --distribution-id "${{ secrets.CF_DIST_ID }}" --paths "/*"
